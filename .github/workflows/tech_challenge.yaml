name: Infra + ETL

on:
  workflow_dispatch:
    inputs:
      target:
        description: "What to run"
        type: choice
        options: [terraform, python, both]
        default: python
        required: true
      terraform_action:
        description: "Terraform action"
        type: choice
        options: [plan, apply, destroy]
        default: plan
        required: true
      overwrite:
        description: "Force rebuild of silver/gold (Python)"
        type: boolean
        default: false
        required: true

jobs:
  sanity-aws-sts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Show whether secrets are set (length only)
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:            ${{ secrets.AWS_REGION || 'sa-east-1' }}
        run: |
          echo "Region: ${AWS_REGION:-unset}"
          echo -n "AKID length: "; printf "%s" "$AWS_ACCESS_KEY_ID" | wc -c
          echo -n "SECRET length: "; printf "%s" "$AWS_SECRET_ACCESS_KEY" | wc -c

      - name: AWS STS caller identity
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:            ${{ secrets.AWS_REGION || 'sa-east-1' }}
        run: |
          pipx install awscli || pip install awscli --quiet
          aws sts get-caller-identity

  python:
    if: ${{ inputs.target == 'python' || inputs.target == 'both' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: python
    env:
      # --- AWS (from secrets) ---
      AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION:            ${{ secrets.AWS_REGION || 'sa-east-1' }}

      # --- PostgreSQL (PNAD) ---
      POSTGRES_USER_PNAD:     ${{ secrets.POSTGRES_USER_PNAD || 'postgres' }}
      POSTGRES_PASSWORD_PNAD: ${{ secrets.POSTGRES_PASSWORD_PNAD }}
      POSTGRES_HOST_PNAD:     ${{ secrets.POSTGRES_HOST_PNAD || 'postgres-tc.clieswmc6fw2.sa-east-1.rds.amazonaws.com' }}
      POSTGRES_PORT_PNAD:     ${{ secrets.POSTGRES_PORT_PNAD || '5432' }}
      POSTGRES_DB_PNAD:       ${{ secrets.POSTGRES_DB_PNAD || 'pnad_covid' }}

      # --- Pipeline behavior ---
      OVERWRITE:              ${{ inputs.overwrite }}  # "true" or "false"
      # S3_BUCKET is optional if your config.py has a default; set it if you want to override:
      S3_BUCKET:              ${{ secrets.S3_BUCKET }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('python/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -U pip
          pip install -r requirements.txt

      - name: Run ETL (main.py)
        run: |
          source .venv/bin/activate
          python main.py

